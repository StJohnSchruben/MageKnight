<UserControl x:Class="MKView.MainView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MKView"
             xmlns:view="clr-namespace:MKView"
              xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
             xmlns:views="clr-namespace:MKView.Views"
             xmlns:vm="clr-namespace:MKViewModel;assembly=MKViewModel"
             xmlns:m="clr-namespace:MKModel;assembly=MKModel"
             mc:Ignorable="d" 
              DataContext="{Binding User, Source={x:Static view:SharedResources.ViewModelLocator}}"
             MouseWheel="UserControl_MouseWheel">
    <UserControl.Resources>
        <RoutedUICommand x:Key="Commands.ZoomOut" />
        <RoutedUICommand x:Key="Commands.ZoomIn" />
        <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
        <RoutedUICommand x:Key="Commands.Fill" />
        <RoutedUICommand x:Key="Commands.OneHundredPercent" />

        <!--
        Defines the UI for an instance of RectangleData.
        -->
        <!--<DataTemplate 
            DataType="{x:Type local:RectangleData}"
            >
            <Rectangle
                Width="{Binding Width}"
                Height="{Binding Height}"
                Fill="{Binding Color, Converter={StaticResource colorToBrushConverter}}"
                Cursor="Hand"
                MouseDown="Rectangle_MouseDown"
                MouseUp="Rectangle_MouseUp"
                MouseMove="Rectangle_MouseMove"
                />
        </DataTemplate>-->

        <!--<Style x:Key="canvasStyle" TargetType="Canvas">
            <Setter >

                <Setter.Value>
                    <ControlTemplate TargetType="Canvas">
                        <Grid Background="Green" Width="40000" Height="40000">
                            <Border Height="3600" Width="3600" BorderBrush="Yellow" BorderThickness="4"/>
                            <Border Height="1800" Width="1800" BorderBrush="Yellow" BorderThickness="4" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                            <Border Height="1800" Width="1800" BorderBrush="Yellow" BorderThickness="4" HorizontalAlignment="Center" VerticalAlignment="Bottom"/>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>-->
        <!-- 
        Override the style of the ListBox to remove the ScrollViewer.
        All we want is ListBox logic but based on a Canvas.
        -->
        <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Canvas x:Name="renderCanvas" 
                                Height="4000"
                                Width="4000"
                                IsItemsHost="True"
                                  Background="Green"
                                Style="{StaticResource canvasStyle}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 
        Override the style of each ListBoxItem to bind Canvas.Left, Canvas.Top and IsSelected.
        -->
        <Style 
            x:Key="listBoxItemStyle" 
            TargetType="ListBoxItem"
            >
            <Setter 
                Property="Canvas.Left" 
                Value="{Binding X}" 
                />
            <Setter 
                Property="Canvas.Top" 
                Value="{Binding Y}" 
                />
            <Setter 
                Property="IsSelected" 
                Value="{Binding IsSelected}" 
                />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <!--
                        This border is used for indicating selection.
                        Normally it is transparent, when the item is selected the border is set to blue.
                        -->
                        <!--<Grid >
                            <views:ArcControl  Width="{Binding ViewModel, Converter={StaticResource TotalWidthConverter}}" Height="{Binding Model, Converter={StaticResource TotalWidthConverter}}" />

                            <views:Dial x:Name="dial" DataContext="{Binding Dial}"/>
                        </Grid>-->
                        <Border 
                            Name="Border"
                            BorderThickness="1"
                            Padding="2"
                            >
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            
                            
                            <Trigger Property="IsSelected" Value="true">
                                <Setter 
                                    TargetName="Border" 
                                    Property="BorderBrush"
                                    Value="Blue"
                                    />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <views:BoolToVisibility x:Key="BoolToVisibility" />
        <views:TotalWidthConverter x:Key="TotalWidthConverter" />
        <DataTemplate DataType="{x:Type vm:MageKnightBattleViewModel}">
            <views:MageKnightBattleView />
        </DataTemplate>
       
    </UserControl.Resources>

        <UserControl.InputBindings>

            <!--
        Bind keys to commands.
        -->
            <KeyBinding
			Key="Minus"
			Command="{StaticResource Commands.ZoomOut}"
			/>
            <KeyBinding
			Key="Plus"
			Command="{StaticResource Commands.ZoomIn}"
			/>
            <KeyBinding
			Key="Backspace"
			Command="{StaticResource Commands.JumpBackToPrevZoom}"
			/>

        </UserControl.InputBindings>

        <UserControl.CommandBindings>

            <!--
        Bind commands to event handlers.
        -->
            <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
            <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
            <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
            <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
            <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />

        </UserControl.CommandBindings>
        <Grid>
        <DockPanel>

            <!-- 
        Grid placed below the zoom and pan control that contains the zoom slider, zoom label and
        some button.
        -->
            <Grid
            Margin="5,5,5,5"
            DockPanel.Dock="Bottom"
            >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <!-- empty space -->
                    <ColumnDefinition Width="40" />
                    <!-- the fill button -->
                    <ColumnDefinition Width="5" />
                    <!-- spacer -->
                    <ColumnDefinition Width="40" />
                    <!-- the 100% button -->
                    <ColumnDefinition Width="5" />
                    <!-- spacer -->
                    <ColumnDefinition Width="25" />
                    <!-- the zoom percentage label -->
                    <ColumnDefinition Width="15" />
                    <!-- the % symbol -->
                    <ColumnDefinition Width="5" />
                    <!-- spacer -->
                    <ColumnDefinition Width="20" />
                    <!-- the zoom out button -->
                    <ColumnDefinition Width="5" />
                    <!-- spacer -->
                    <ColumnDefinition Width="120" />
                    <!-- the zoom slider -->
                    <ColumnDefinition Width="5" />
                    <!-- spacer -->
                    <ColumnDefinition Width="20" />
                    <!-- the zoom in button -->
                    <ColumnDefinition Width="10" />
                    <!-- spacer -->
                    <ColumnDefinition Width="Auto" />
                    <!-- resize grip -->
                    <!-- spacer -->
                </Grid.ColumnDefinitions>

                <!-- 
            The fill button.  Causes the content to be scaled so that it fits in the viewport.
            -->
                <Button
                Grid.Column="1"
                Command="{StaticResource Commands.Fill}"
                >
                    Fill
                </Button>
                <!-- 
            The 100% button.  Causes the content to be scaled to 100 percent.
            -->
                <Button
                Grid.Column="3"
                Command="{StaticResource Commands.OneHundredPercent}"
                >
                    100%
                </Button>

                <!--
            This is the label that shows what the current zoom level
            is while zooming in and out.
            -->
                <!--<TextBlock
                Grid.Column="5"
                VerticalAlignment="Center"
                HorizontalAlignment="Right"
                Text="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource scaleToPercentConverter}}"
                />-->

                <TextBlock
                Grid.Column="6"
                VerticalAlignment="Center"
                Text="%"
                />

                <!-- Button to zoom out. -->
                <Button
                Grid.Column="8"
                Command="{StaticResource Commands.ZoomOut}"
                >
                    -
                </Button>

                <!-- Slider to change the current zoom level. -->
                <!--<Slider
                Grid.Column="10"
                Minimum="10" 
                LargeChange="20" 
                TickFrequency="10" 
                Maximum="200" 
                SmallChange="10" 
                TickPlacement="TopLeft"
                Value="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource scaleToPercentConverter}}"
                />-->

                <!--
            Button to zoom in.
            -->
                <Button
                Grid.Column="12"
                Command="{StaticResource Commands.ZoomIn}"
                >
                    +
                </Button>

                <!-- Stick a resize grip in the bottom right corner of the window. -->
                <ResizeGrip
                Grid.Column="14"
                />

            </Grid>

            <!--
	    Wrap the ZoomAndPanControl in a ScrollViewer.
	    When the scaled content that is displayed in ZoomAndPanControl is larger than the viewport onto the content
	    ScrollViewer's scrollbars can be used to manipulate the offset of the viewport.    
        -->
            <ScrollViewer
			x:Name="scroller"
            CanContentScroll="True"
            VerticalScrollBarVisibility="Visible"
            HorizontalScrollBarVisibility="Visible"
            >

                <!--
            This is the control that handles zooming and panning.
            -->
                <ZoomAndPan:ZoomAndPanControl
                x:Name="zoomAndPanControl"
                
                ContentViewportWidth="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}"
                ContentViewportHeight="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}"
                Background="LightGray"
	            MouseDown="zoomAndPanControl_MouseDown"
	            MouseUp="zoomAndPanControl_MouseUp"
	            MouseMove="zoomAndPanControl_MouseMove"
	            MouseWheel="zoomAndPanControl_MouseWheel"
                MouseDoubleClick="zoomAndPanControl_MouseDoubleClick"
                >

                    <!-- 
	            This is the content that is displayed.
	            -->
                    <Grid
                    Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}"
                    Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}"
                    >
                        <!--
                	This ListBox is the main part of the content that is displayed.
                    The list box contains instances of RectangleData, the DataTemplate for RectangleData is in
                    the UserControl.Resources section of this file.
                    -->
                        <!--<ItemsControl x:Name="content"  ItemTemplate="{StaticResource MageKnight}"  ItemsSource="{Binding ActiveArmy}"   Height="{Binding ActualHeight}" Width="{Binding ActualWidth}" Grid.Row="1" >
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas  
                                        IsItemsHost="True"
                                          Background="Green"
                                        MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}}"
                                        Height="{Binding ActualHeight}" Width="{Binding ActualWidth}"/> 
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="ContentPresenter">
                                    --><!--<Setter Property="local:DraggableExtender.CanDrag" Value="True" />--><!--
                                    <Setter Property="Canvas.Left" Value="{Binding Path=XCord}" />
                                    <Setter Property="Canvas.Top" Value="{Binding Path=YCord}" />
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                        </ItemsControl>-->
                        <Viewbox x:Name="content">
                            <views:BattleGround  DataContext="{Binding}" />
                        </Viewbox>
                        <!--<ListBox
                        x:Name="content"
                        Background="White"
                        ItemsSource="{Binding ActiveArmy}"
                        Style="{StaticResource noScrollViewerListBoxStyle}"

                        />-->

                        <!--
                    This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                    uses to specify an area to zoom in on.
                    -->
                        <Canvas
                        x:Name="dragZoomCanvas"
                        Visibility="Collapsed"
                        >
                            <Border 
                            x:Name="dragZoomBorder"
                            BorderBrush="Black"
                            BorderThickness="1"
                            Background="Silver"
                            CornerRadius="1"
                            Opacity="0"
                            />
                        </Canvas>
                    </Grid>
                </ZoomAndPan:ZoomAndPanControl>
            </ScrollViewer>
        </DockPanel>
        <!--<Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition Height="59*"/>
        </Grid.RowDefinitions>-->
        <!--<Button Grid.Column="0" x:Name="mainMenu" Click="mainMenu_Click">
            Main Menu
        </Button>
        <Button Grid.Column="1" x:Name="ArmyBuilder" Click="ArmyBuilder_Click">
            Army Builder
        </Button>
        <Button Grid.Column="2" x:Name="BattleGround" Click="BattleGround_Click">
            Battle Ground
        </Button>
        <Button Grid.Column="3" x:Name="Database" Click="Database_Click">
            Database
        </Button>
        <Button Grid.Column="4" x:Name="UnderConstruction" Click="UnderConstruction_Click">
            Under Construction
        </Button>
        <views:MainMenu Grid.Row="1" Grid.ColumnSpan="5" x:Name="mm" Visibility="Hidden"/>-->
        
        <!--<Canvas Background="Blue" x:Name="bg" Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}" >-->
        <!--<ZoomAndPan:ZoomAndPanControl Grid.Row="1" Grid.ColumnSpan="5"   Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}" 
        x:Name="zoomAndPanControl"
        Background="Blue"
         MouseDown="zoomAndPanControl_MouseDown"
	    MouseUp="zoomAndPanControl_MouseUp"
	    MouseMove="zoomAndPanControl_MouseMove"
	    MouseWheel="zoomAndPanControl_MouseWheel"
        MouseDoubleClick="zoomAndPanControl_MouseDoubleClick"
        >
            <Grid Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualWidth}" >
                <Viewbox  Canvas.Top="0" Canvas.Left="0" Stretch="UniformToFill" Grid.Row="1" Grid.ColumnSpan="5" x:Name="vb" Height="1000" Width="1000" >
                    <views:BattleGround    DataContext="{Binding User, Source={x:Static view:SharedResources.ViewModelLocator}}"/>

                </Viewbox>
                <Canvas
                        x:Name="dragZoomCanvas"
                        Visibility="Collapsed"
                        >
                    <Border 
                            x:Name="dragZoomBorder"
                            BorderBrush="Black"
                            BorderThickness="1"
                            Background="Silver"
                            CornerRadius="1"
                            Opacity="0"
                            />
                </Canvas>
            </Grid>
          
        </ZoomAndPan:ZoomAndPanControl>-->

        <!--</Canvas>-->

        <views:ArmyBuilder   Grid.Row="1" Grid.ColumnSpan="5" x:Name="ab" Visibility="Hidden" DataContext="{Binding ArmyBuilder, Source={x:Static view:SharedResources.ViewModelLocator}}" Height="Auto" Margin="0,77,-300,78" Width="Auto"/>
        <!--<views:MageKnightGenerator x:Name="mkg" Grid.Row="1" Grid.ColumnSpan="5" Visibility="Hidden" DataContext="{Binding MageKnightGenerator, Source={x:Static view:SharedResources.ViewModelLocator}}"/>-->
    </Grid>
</UserControl>
